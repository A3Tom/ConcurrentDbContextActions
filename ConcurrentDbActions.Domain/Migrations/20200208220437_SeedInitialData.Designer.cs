// <auto-generated />
using System;
using ConcurrentDbActions.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConcurrentDbActions.Domain.Migrations
{
    [DbContext(typeof(StockroomDbContext))]
    [Migration("20200208220437_SeedInitialData")]
    partial class SeedInitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dookit Alpha"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Warehouse Bravo"
                        });
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.PriceAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ModificationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UpdatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "Baws00tMate1",
                            Name = "Bread",
                            Price = 0.90m,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "Baws00tMate2",
                            Name = "Tortilla",
                            Price = 1.50m,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "Baws00tMate3",
                            Name = "Rolls",
                            Price = 0.25m,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "WTSChickens25c",
                            Name = "Chicken",
                            Price = 1.10m,
                            ProductType = 2
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "WTSChickens25c",
                            Name = "Beef",
                            Price = 2.50m,
                            ProductType = 2
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "WTSChickens25c",
                            Name = "Cheese",
                            Price = 0.85m,
                            ProductType = 2
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "MateStop-FrogsAreSound",
                            Name = "Frogs Legs",
                            Price = 2.50m,
                            ProductType = 3
                        });
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            LocationId = 1,
                            ProductId = 1,
                            Quantity = 20.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            LocationId = 1,
                            ProductId = 2,
                            Quantity = 8.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            LocationId = 1,
                            ProductId = 3,
                            Quantity = 0.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            LocationId = 2,
                            ProductId = 4,
                            Quantity = 3.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            LocationId = 2,
                            ProductId = 5,
                            Quantity = 1.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            LocationId = 1,
                            ProductId = 6,
                            Quantity = 4.0,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            LocationId = 1,
                            ProductId = 7,
                            Quantity = 12.0,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.StockAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UpdatedQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("StockHistory");
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("98836b5f-3c53-4068-8e32-97f0b51f6d21"),
                            Email = "Tom.Smith@CosmicSafari.co.uk",
                            Name = "Tom",
                            Username = "Hingsmaster"
                        });
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Home",
                            WarehouseType = 1
                        });
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.PriceAudit", b =>
                {
                    b.HasOne("ConcurrentDbActions.Domain.Models.Product", "Product")
                        .WithMany("PriceAudits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcurrentDbActions.Domain.Models.User", "UpdatedByUser")
                        .WithMany("PriceAudits")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.Stock", b =>
                {
                    b.HasOne("ConcurrentDbActions.Domain.Models.Location", "Location")
                        .WithMany("Stock")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcurrentDbActions.Domain.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcurrentDbActions.Domain.Models.Warehouse", "Warehouse")
                        .WithMany("Stock")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConcurrentDbActions.Domain.Models.StockAudit", b =>
                {
                    b.HasOne("ConcurrentDbActions.Domain.Models.Stock", "Stock")
                        .WithMany("StockAudits")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcurrentDbActions.Domain.Models.User", "UpdatedByUser")
                        .WithMany("StockAudits")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
